@model TheKitchen.Models.Entities.ShoppingList
@{
    ViewData["Title"] = Model.Name;
}

<div class="container">
    <div class="row">
        <div class="col-lg-8">
            <div class="card">
                <div class="card-header bg-brown text-white d-flex justify-content-between align-items-center">
                    <h3 class="mb-0">@Model.Name</h3>
                    <span class="badge bg-light text-brown">
                        Created: @Model.CreatedDate.ToString("MMM dd, yyyy")
                    </span>
                </div>
                <div class="card-body">
                    @if (Model.Items.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th width="50"></th>
                                        <th>Item</th>
                                        <th>Quantity</th>
                                        <th>Category</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Model.Items)
                                    {
                                        <tr class="@(item.IsPurchased ? "table-success purchased-item" : "")">
                                            <td>
                                                <input type="checkbox" class="form-check-input purchase-checkbox" 
                                                       data-itemid="@item.Id" @(item.IsPurchased ? "checked" : "")>
                                            </td>
                                            <td>@item.Name</td>
                                            <td>@item.Quantity</td>
                                            <td>
                                                <span class="badge bg-light text-brown">@item.Category</span>
                                            </td>
                                            <td>
                                                <button class="btn btn-sm btn-outline-danger remove-item" data-itemid="@item.Id">
                                                    <i class="fas fa-times"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        
                        <div class="mt-3">
                            <small class="text-muted">
                                @Model.Items.Count(i => i.IsPurchased) of @Model.Items.Count items purchased
                            </small>
                            <div class="progress mt-1" style="height: 8px;">
                                <div class="progress-bar bg-success" 
                                     style="width: @(Model.Items.Count > 0 ? (Model.Items.Count(i => i.IsPurchased) * 100 / Model.Items.Count) : 0)%">
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="fas fa-shopping-cart fa-3x text-muted mb-3"></i>
                            <h5>No items in this shopping list</h5>
                            <p class="text-muted">Add items from recipes to get started.</p>
                        </div>
                    }
                </div>
                <div class="card-footer">
                    <div class="d-flex justify-content-between">
                        <a asp-action="Index" class="btn btn-outline-secondary">
                            <i class="fas fa-arrow-left me-1"></i>Back to Lists
                        </a>
                        <div>
                            <button class="btn btn-outline-success me-2" id="markAllComplete">
                                <i class="fas fa-check-circle me-1"></i>Mark All Complete
                            </button>
                            <button class="btn btn-outline-warning" id="markAllIncomplete">
                                <i class="fas fa-redo me-1"></i>Mark All Incomplete
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-lg-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Quick Actions</h5>
                    <div class="d-grid gap-2">
                        <a asp-controller="Recipe" asp-action="Index" class="btn btn-outline-brown">
                            <i class="fas fa-book me-1"></i>Browse Recipes
                        </a>
                        <a asp-action="Merge" class="btn btn-outline-brown">
                            <i class="fas fa-object-group me-1"></i>Merge Lists
                        </a>
                        <button class="btn btn-outline-info" onclick="window.print()">
                            <i class="fas fa-print me-1"></i>Print List
                        </button>
                    </div>
                </div>
            </div>
            
            <!-- Add Item Form -->
            <div class="card mt-4">
                <div class="card-body">
                    <h5 class="card-title">Add Custom Item</h5>
                    <form id="addCustomItemForm">
                        <div class="mb-3">
                            <label class="form-label">Item Name</label>
                            <input type="text" class="form-control" id="itemName" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Quantity</label>
                            <input type="text" class="form-control" id="itemQuantity" placeholder="e.g., 2 cups">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Category</label>
                            <select class="form-select" id="itemCategory">
                                <option value="Produce">Produce</option>
                                <option value="Dairy">Dairy</option>
                                <option value="Meat">Meat</option>
                                <option value="Baking">Baking</option>
                                <option value="Grains">Grains</option>
                                <option value="Condiments">Condiments</option>
                                <option value="Other">Other</option>
                            </select>
                        </div>
                        <button type="submit" class="btn btn-primary w-100">
                            <i class="fas fa-plus me-1"></i>Add Item
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Toggle item purchased status
        document.querySelectorAll('.purchase-checkbox').forEach(checkbox => {
            checkbox.addEventListener('change', async function() {
                const itemId = this.getAttribute('data-itemid');
                const isPurchased = this.checked;
                
                try {
                    const response = await fetch('@Url.Action("ToggleItemPurchased", "ShoppingList")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            itemId: parseInt(itemId),
                            isPurchased: isPurchased
                        })
                    });
                    
                    if (!response.ok) {
                        throw new Error('Failed to update item');
                    }
                    
                    // Update row appearance
                    const row = this.closest('tr');
                    if (isPurchased) {
                        row.classList.add('table-success', 'purchased-item');
                    } else {
                        row.classList.remove('table-success', 'purchased-item');
                    }
                    
                } catch (error) {
                    console.error('Error:', error);
                    alert('Error updating item. Please try again.');
                    this.checked = !isPurchased; // Revert checkbox
                }
            });
        });

        // Mark all complete
        document.getElementById('markAllComplete').addEventListener('click', async function() {
            if (confirm('Mark all items as purchased?')) {
                try {
                    const response = await fetch('@Url.Action("MarkAllPurchased", "ShoppingList")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            listId: @Model.Id
                        })
                    });
                    
                    if (response.ok) {
                        location.reload();
                    }
                } catch (error) {
                    alert('Error updating items. Please try again.');
                }
            }
        });

        // Mark all incomplete
        document.getElementById('markAllIncomplete').addEventListener('click', async function() {
            if (confirm('Mark all items as not purchased?')) {
                try {
                    const response = await fetch('@Url.Action("MarkAllUnpurchased", "ShoppingList")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            listId: @Model.Id
                        })
                    });
                    
                    if (response.ok) {
                        location.reload();
                    }
                } catch (error) {
                    alert('Error updating items. Please try again.');
                }
            }
        });

        // Add custom item
        document.getElementById('addCustomItemForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const name = document.getElementById('itemName').value;
            const quantity = document.getElementById('itemQuantity').value;
            const category = document.getElementById('itemCategory').value;
            
            if (!name) {
                alert('Please enter an item name');
                return;
            }

            try {
                const response = await fetch('@Url.Action("AddCustomItem", "ShoppingList")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        listId: @Model.Id,
                        name: name,
                        quantity: quantity,
                        category: category
                    })
                });
                
                if (response.ok) {
                    location.reload();
                } else {
                    alert('Error adding item. Please try again.');
                }
            } catch (error) {
                alert('Error adding item. Please try again.');
            }
        });
    </script>

    <style>
        .purchased-item td {
            text-decoration: line-through;
            opacity: 0.7;
        }
    </style>
}